<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Threading.Tasks.Dataflow</name>
    </assembly>
    <members>
        <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
            <summary>
            Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.  
            Messages are broadcast to all linked targets, all of which may consume a clone of the message.
            </summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
            <remarks>
            <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> exposes at most one element at a time.  However, unlike
            <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1"/>, that element will be overwritten as new elements are provided
            to the block.  <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> ensures that the current element is broadcast to any
            linked targets before allowing the element to be overwritten.
            </remarks>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
            <summary>Represents a dataflow block that is both a target for data and a source of data.</summary>
            <typeparam name="TInput">Specifies the type of data accepted by the <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2"/>.</typeparam>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
            <summary>Represents a dataflow block that is a target for data.</summary>
            <typeparam name="TInput">Specifies the type of data accepted by the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.</typeparam>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
            <summary>Represents a dataflow block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.DeclinePermanently">
            <!-- No matching elements were found for the following include tag --><include file="CommonXmlDocComments.xml" path="CommonXmlDocComments/Sources/Member[@name=&quot;DeclinePermanently&quot;]/*"/>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="CommonXmlDocComments.xml" path="CommonXmlDocComments/Sources/Member[@name=&quot;OfferMessage&quot;]/*"/>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
            <summary>Represents a dataflow block that is a source of data.</summary>
            <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.</typeparam>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.m_target">
            <summary>The target side.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.m_source">
            <summary>The source side.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> with the specified cloning function.</summary>
            <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/>  with the specified cloning function and <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.HasValueForDebugger">
            <summary>Gets a value to be used for the DebuggerDisplayAttribute.  This must not throw even if HasValue is false.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ValueForDebugger">
            <summary>Gets a value to be used for the DebuggerDisplayAttribute.  This must not throw even if HasValue is false.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView">
            <summary>Provides a debugger type proxy for the BroadcastBlock.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.m_broadcastBlock">
            <summary>The BroadcastBlock being debugged.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.m_sourceDebuggingInformation">
            <summary>Debug info about the source side of the broadcast.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.BroadcastBlock{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="broadcastBlock">The BroadcastBlock being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.HasValue">
            <summary>Gets whether the broadcast has a current value.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.Value">
            <summary>Gets the broadcast's current value.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.DebugView.NextMessageReservedFor">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1">
            <summary>Provides a core implementation for blocks that implement <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.</summary>
            <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.Internal.SourceCore`1"/>.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_executionContext">
            <summary>The execution context captured when this block was instantiated.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_targetRegistry">
            <summary>A registry used to store all linked targets and information about them.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_messages">
            <summary>All of the output messages queued up to be received by consumers/targets.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_completionTask">
            <summary>A TaskCompletionSource that represents the completion of this block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_cachedOfferMessagesLoopDelegate">
            <summary>A cached delegate used to invoke the offering messages loop.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_owningSource">
            <summary>The source utilize this helper.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_dataflowBlockOptions">
            <summary>The options used to configure this block's execution.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_cloningFunction">
            <summary>The cloning function to use.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_declinePermanentlyAction">
            <summary>An action to be invoked on the owner block to stop accepting message.
            This action is invoked when SourceCore encounters an exception.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_currentMessage">
            <summary>The message currently being broadcast.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_nextMessageReservedFor">
            <summary>The target that the next message is reserved for, or null if nothing is reserved.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_enableOffering">
            <summary>Whether this block should again attempt to offer messages to targets.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_decliningPermanently">
            <summary>Whether all future messages should be declined.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_taskForOutputProcessing">
            <summary>The task used to process the output and offer it to targets.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.m_exceptions">
            <summary>Exceptions that may have occured and gone unhandled during processing.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.#ctor(System.Threading.Tasks.Dataflow.ISourceBlock{`1},System.Func{`1,`1},System.Threading.Tasks.Dataflow.DataflowBlockOptions,System.Action)">
            <summary>Initializes the source core.</summary>
            <param name="owningSource">The source utilizing this core.</param>
            <param name="deepCloningFunction">The function to use to clone the data when offered to other blocks.</param>
            <param name="dataflowBlockOptions">The options to use to configure the block.</param>
            <param name="declinePermanentlyAction">Action to invoke in order to decline the associated target half, which will in turn decline this source core.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.TryReceive(System.Predicate{`1},`1@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.AddMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1})">
            <summary>Adds a message to the source block for propagation.</summary>
            <param name="message">The item to be added.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DeclinePermanently">
            <summary>Informs the block that it will not be receiving additional messages.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.CloneItem(`1)">
            <summary>Clones the item.</summary>
            <param name="item">The item to clone.</param>
            <returns>The cloned item.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.OfferCurrentMessageToNewTarget(System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>Offers the current message to a specific target.</summary>
            <param name="target">The target to which to offer the current message.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.OfferToTargets">
            <summary>Offers messages to targets.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.OfferMessageToTarget(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>Offers the specified message to the specified target.</summary>
            <param name="message">The message to offer.</param>
            <param name="target">The target to which the message should be offered.</param>
            <remarks>
            This will remove the target from the target registry if the result of the propagation demands it.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.OfferAsyncIfNecessary(System.Boolean)">
            <summary>Called when we want to enable asynchronously offering message to targets.</summary>
            <param name="isReplacementReplica">Whether this call is the continuation of a previous message loop.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.OfferMessagesLoop(System.Object)">
            <summary>Task body used to process messages.</summary>
            <param name="taskObjectState">Task object state that's ignored in this method but which helps debugging.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.CompleteBlockIfPossible">
            <summary>Completes the block's processing if there's nothing left to do and never will be.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.AddException(System.Exception)">
            <summary>Adds an individual exceptionto this source.</summary>
            <param name="exception">The exception to add</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.GetDebuggingInformation">
            <summary>Gets information about this helper to be used for display in a debugger.</summary>
            <returns>Debugging information about this source core.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.OutgoingLock">
            <summary>Gets the object to use as the outgoing lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.ValueLock">
            <summary>Gets the object to use as the value lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.CanceledOrFaulted">
            <summary>Gets whether the source has had cancellation requested or an exception has occurred.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation">
            <summary>Provides debugging information about the source core.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.m_source">
            <summary>The source being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.#ctor(System.Threading.Tasks.Dataflow.BroadcastBlock{`0}.BroadcastingSourceCore{`1})">
            <summary>Initializes the type proxy.</summary>
            <param name="source">The source being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.HasValue">
            <summary>Gets whether the source contains a current message.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.Value">
            <summary>Gets the value of the source's current message.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.InputCount">
            <summary>Gets the number of messages waiting to be made current.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.InputQueue">
            <summary>Gets the messages available for receiving.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.BroadcastingSourceCore`1.DebuggingInformation.NextMessageReservedFor">
            <summary>Gets the target that holds a reservation on the next message, if any.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.SourceCore`1">
            <summary>Provides a core implementation for blocks that implement <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.</summary>
            <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.Internal.SourceCore`1"/>.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_completionTask">
            <summary>A TaskCompletionSource that represents the completion of this block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_targetRegistry">
            <summary>A registry used to store all linked targets and information about them.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_messages">
            <summary>All of the output messages queued up to be received by consumers/targets.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_executionContext">
            <summary>The execution context captured when this block was instantiated.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_cachedOfferMessagesLoopDelegate">
            <summary>A cached delegate used to invoke the offering messages loop.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_owningSource">
            <summary>The source utilizing this helper.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_dataflowBlockOptions">
            <summary>The options used to configure this block's execution.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_declinePermanentlyAction">
            <summary>
            An action to be invoked on the owner block to stop accepting messages.
            This action is invoked when SourceCore encounters an exception.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_taskForOutputProcessing">
            <summary>The task used to process the output and offer it to targets.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_nextMessageReservedFor">
            <summary>The target that the next message is reserved for, or null if nothing is reserved.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_decliningPermanently">
            <summary>Whether all future messages should be declined.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_enableOffering">
            <summary>Whether this block should again attempt to offer messages to targets.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.m_exceptions">
            <summary>Exceptions that may have occured and gone unhandled during processing.</summary>
            <remarks>
            Marked volatile because we compare the m_exceptions reference to null while not under a lock,
            but we manipulate it elsewhere (e.g. initializing it to non-null) while holding a lock.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.#ctor(System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions,System.Action)">
            <summary>Initializes the source core.</summary>
            <param name="owningSource">The source utilizing this core.  The source may be null.</param>
            <param name="dataflowBlockOptions">The options to use to configure the block.</param>
            <param name="declinePermanentlyAction">Action to invoke in order to decline the associated target half, which will in turn decline this source core.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.AddMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0})">
            <summary>Adds a message to the source block for propagation.</summary>
            <param name="message">The message to be added.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.AddMessages(System.Collections.Generic.List{System.Threading.Tasks.Dataflow.DataflowMessage{`0}})">
            <summary>Adds messages to the source block for propagation.</summary>
            <param name="messages">The messages to be added.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.AddException(System.Exception)">
            <summary>Adds an individual exceptionto this source.</summary>
            <param name="exception">The exception to add</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.AddAndUnwrapAggregateException(System.AggregateException)">
            <summary>Adds the exceptions contained in an AggregateException to this source.</summary>
            <param name="aggregateException">The exception to add</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DeclinePermanently">
            <summary>Informs the block that it will not be receiving additional messages.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.OfferToTargets(System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>Offers messages to all targets.</summary>
            <param name="linkToTarget">
            The newly linked target, if OfferToTargets is being called to synchronously
            propagate to a target during a LinkTo operation.
            </param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.OfferMessageToTarget(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
            <summary>Offers the message to the target.</summary>
            <param name="message">The message to offer.</param>
            <param name="target">The single target to which the message should be offered.</param>
            <param name="messageWasAccepted">true if the message was accepted by the target; otherwise, false.</param>
            <returns>
            true if the message should not be offered to additional targets; 
            false if propagation should be allowed to continue.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.OfferAsyncIfNecessary(System.Boolean,System.Boolean)">
            <summary>Called when we want to enable asynchronously offering message to targets.</summary>
            <param name="isReplacementReplica">Whether this call is the continuation of a previous message loop.</param>
            <param name="includeOutgoingOnlyChecks">Whether this call should include in "what's necessary" checks that require the outgoing lock.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.OfferMessagesLoop(System.Object)">
            <summary>Task body used to process messages.</summary>
            <param name="taskObjectState">Task object state that's ignored in this method but which helps debugging.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.CompleteBlockIfPossible">
            <summary>Completes the block's processing if there's nothing left to do and never will be.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.CompleteBlockOncePossible">
            <summary>
            Completes the block.  This must only be called once, and only once all of the completion conditions are met.
            As such, it must only be called from CompleteBlockIfPossible.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.GetDebuggingInformation">
            <summary>Gets information about this helper to be used for display in a debugger.</summary>
            <returns>Debugging information about this source core.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.OutgoingLock">
            <summary>Gets the object to use as the outgoing lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.ValueLock">
            <summary>Gets the object to use as the value lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.OutputCount">
            <summary>Gets the number of items available to be received from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.CanceledOrFaulted">
            <summary>Gets whether the source has had cancellation requested or an exception has occurred.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation">
            <summary>Provides debugging information about the source core.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.m_source">
            <summary>The source being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.#ctor(System.Threading.Tasks.Dataflow.Internal.SourceCore{`0})">
            <summary>Initializes the type proxy.</summary>
            <param name="source">The source being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.OutputCount">
            <summary>Gets the number of messages available for receiving.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.OutputQueue">
            <summary>Gets the messages available for receiving.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.SourceCore`1.DebuggingInformation.NextMessageReservedFor">
            <summary>Gets the target that holds a reservation on the next message, if any.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1">
            <summary>Stores targets registered with a source.</summary>
            <typeparam name="T">Specifies the type of data accepted by the targets.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.m_orderedTargetList">
            <summary>An ordered list of targets.  Targets should be offered messages in order from index 0 to N-1.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.m_targetInformation">
            <summary>A mapping of targets to information about them.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.m_owningSource">
            <summary>A reference to the owning source block.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.#ctor(System.Threading.Tasks.Dataflow.ISourceBlock{`0})">
            <summary>Initializes the registry.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.Add(System.Threading.Tasks.Dataflow.ITargetBlock{`0}@,System.Boolean)">
            <summary>Adds a target to the registry.</summary>
            <param name="target">The target to add.</param>
            <param name="unlinkAfterOne">
            A Boolean value indicating whether the target should be disconnected after one successful propagation.
            </param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.Contains(System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>Gets whether the registry contains a particular target.</summary>
            <param name="target">The target.</param>
            <returns>true if the registry contains the target; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.Clear">
            <summary>Clears the target registry.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.Remove(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>Removes the target from the registry.</summary>
            <param name="target">The target to remove.</param>
            <param name="onlyIfUnlinkAfterOne">
            Only remove the target if it's configured to be unlinked after one propagation.
            </param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.Count">
            <summary>Gets the number of items in the registry.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.OrderedTargetList">
            <summary>Gets the ordered target list.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.LinkedTargetInfo">
            <summary>Information about a registered target.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.LinkedTargetInfo.#ctor(System.Boolean,System.Collections.Generic.LinkedListNode{System.Threading.Tasks.Dataflow.ITargetBlock{`0}})">
            <summary>Initializes the LinkedTargetInfo.</summary>
            <param name="unlinkAfterOne">Whether the target should be disconnected after one successful propagation.</param>
            <param name="listNode">The linked list node for this entry.</param>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.LinkedTargetInfo.UnlinkAfterOne">
            <summary>Whether to unlink this node after one propagation.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.LinkedTargetInfo.ListNode">
            <summary>The linked list node for this entry.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator">
            <summary>Provides a nop passthrough for use with TargetRegistry.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.m_owningSource">
            <summary>The source that encapsulates this block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.m_target">
            <summary>The target with which this block is associated.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.#ctor(System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>Initializes the passthrough.</summary>
            <param name="owningSource">The source that encapsulates this block.</param>
            <param name="target">The target to which messages should be forwarded.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ISourceBlock{T}#TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ISourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ITargetBlock{T}#Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ITargetBlock{T}#DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.System#Threading#Tasks#Dataflow#ISourceBlock{T}#LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.DebugView">
            <summary>Provides a debugger type proxy for a passthrough.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.DebugView.m_passthrough">
            <summary>The passthrough.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.DebugView.#ctor(System.Threading.Tasks.Dataflow.Internal.TargetRegistry{`0}.NopLinkPropagator)">
            <summary>Initializes the debug view.</summary>
            <param name="passthrough">The passthrough to view.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.NopLinkPropagator.DebugView.LinkedTarget">
            <summary>The linked target for this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.DebugView">
            <summary>Provides a debugger type proxy for the target registry.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.DebugView.m_registry">
            <summary>The registry being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.Internal.TargetRegistry{`0})">
            <summary>Initializes the type proxy.</summary>
            <param name="registry">The target registry.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetRegistry`1.DebugView.Targets">
            <summary>Gets a list of all targets to show in the debugger.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
            <summary>Represents the status of a <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> when passed between dataflow blocks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
            <summary>
            Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> accepted the message.  Once a target has accepted a message, 
            it is wholly owned by the target.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
            <summary>
            Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> declined the message.  The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> still owns the message.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
            <summary>
            Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> postponed the message for potential consumption at a later time.  
            The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> still owns the message.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
            <summary>
            Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> tried to accept the message from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>, but the 
            message was no longer available.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
            <summary>
            Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> declined the message.  The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> still owns the message.  
            Additionally, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> will decline all future messages sent by the source.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetCore`1">
            <summary>
            Provides a core implementation of <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.</summary>
            <typeparam name="TInput">Specifies the type of data accepted by the <see cref="T:System.Threading.Tasks.Dataflow.Internal.TargetCore`1"/>.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_messages">
            <summary>The messages in this target.</summary>
            <remarks>This field doubles as the IncomingLock.</remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_executionContext">
            <summary>The context captured when the block was instantiated.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_owningTarget">
            <summary>The target block using this helper.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_dataflowBlockOptions">
            <summary>The options associated with this block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_callAction">
            <summary>An action to invoke for every accepted message.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_usesAsyncCompletion">
            <summary>Whether the block relies on the delegate to signal when an async operation has completed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_lazilyInitializedCompletionTask">
            <summary>A task representing the completion of the block.</summary>
            <remarks>This field is lazily initialized.</remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_exceptions">
            <summary>Exceptions that may have occured and gone unhandled during processing.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_decliningPermanently">
            <summary>Whether to stop accepting new messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_nextAvailableInputMessageId">
            <summary>The next available ID we can assign to a message about to be processed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_postponedMessages">
            <summary>Messages postponed when in non-greedy mode.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.m_numberOfOutstandingOperations">
            <summary>The number of operations currently running asynchronously.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.#ctor(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Action{System.Collections.Generic.KeyValuePair{`0,System.Int64}},System.Threading.Tasks.Dataflow.DataflowBlockOptions,System.Boolean)">
            <summary>Initializes the target core.</summary>
            <param name="owningTarget">The target using this helper.</param>
            <param name="callAction">An action to invoke for all accepted items.</param>
            <param name="dataflowBlockOptions">The options to use to configure this block.</param>
            <param name="usesAsyncCompletion"></param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.SignalOneAsyncMessageCompleted">
            <summary>Signals to the target core that a previously launched asynchronous operation has now completed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.PostError(System.Exception)">
            <summary>Posts an error to the block from an asynchronous operation.</summary>
            <param name="error">The error to add.</param>
            <remarks>
            Posting an error does not also complete the async operation. SignalOneAsyncMessageCompleted
            must still be called.  PostError may be called multiple times for a single async operation.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.PostError(System.AggregateException,System.Boolean)">
            <summary>Posts an error to the block from an asynchronous operation.</summary>
            <param name="error">The error to add.</param>
            <param name="unwrapInnerExceptions">Whether to unwrap the inner exceptions and add them individually or to add the aggregate itself.</param>
            <remarks>
            Posting an error does not also complete the async operation. SignalOneAsyncMessageCompleted
            must still be called.  PostError may be called multiple times for a single async operation.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.ProcessAsyncIfNecessary(System.Boolean)">
            <summary>Called when new messages are available to be processed.</summary>
            <param name="repeat">Whether this call is the continuation of a previous message loop.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.ProcessMessagesLoop(System.Object)">
            <summary>Task body used to process messages.</summary>
            <param name="taskObjectState">Task object state that's ignored in this method but which helps debugging.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.TryGetNextMessageForNewAsyncOperation(System.Collections.Generic.KeyValuePair{`0,System.Int64}@,System.Boolean)">
            <summary>Retrieves the next message from the input queue for the useAsyncCompletion mode.</summary>
            <param name="messageWithId">The next message retrieved.</param>
            <param name="requiresAdditionalDOP">True if this method must check whether there is 
            availability for parallelism and must increment m_numberOfOutstandingOperations.</param>
            <returns>true if a message was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.TryGetNextAvailableOrPostponedMessage(System.Collections.Generic.KeyValuePair{`0,System.Int64}@)">
            <summary>
            Either takes the next available message from the input queue or retrieves a postponed 
            message from a source, based on whether we're in greedy or non-greedy mode.
            </summary>
            <param name="messageWithId">The retrieved item with its Id.</param>
            <returns>true if a message could be removed and returned; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.TryConsumePostponedMessage(`0@)">
            <summary>Consumes a single postponed message.</summary>
            <returns>true if a message was consumed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.CompleteBlockIfPossible">
            <summary>Completes the block once all completion conditions are met.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.CompleteBlockOncePossible">
            <summary>
            Completes the block.  This must only be called once, and only once all of the completion conditions are met.
            As such, it must only be called from CompleteBlockIfPossible.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.GetDebuggingInformation">
            <summary>Gets information about this helper to be used for display in a debugger.</summary>
            <returns>Debugging information about this target.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.IncomingLock">
            <summary>Gets the object used as the incoming lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.CompletionTaskSource">
            <summary>
            Gets the TaskCompletionSource to use for this block's CompletionTask.  
            This property lazily-initializes the source.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.InputCount">
            <summary>Gets the number of items waiting to be processed by this target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.MoreRoomToProcessAsynchronously">
            <summary>Gets whether there's room to launch more processing.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation">
            <summary>Provides a wrapper for commonly needed debugging information.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.m_target">
            <summary>The target being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.#ctor(System.Threading.Tasks.Dataflow.Internal.TargetCore{`0})">
            <summary>Initializes the debugging helper.</summary>
            <param name="target">The target being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.InputCount">
            <summary>Gets the number of messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.NumberOfOutstandingOperations">
            <summary>Gets the task being used for input processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.TargetCore`1.DebuggingInformation.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.SR">
            <summary>
            String resources for .NET 4 builds of System.Threading.Tasks.Dataflow.dll.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.SR.GetString(System.String)">
            <summary>Gets the text string for the specified ID.</summary>
            <param name="id">The ID for which to retrieve the string resource.</param>
            <returns>The string resource for the specified ID.</returns>
            <remarks>This implementation merely returns the provided ID.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformBlock`2.m_target">
            <summary>The target side.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformBlock`2.m_reorderingBuffer">
            <summary>Buffer used to reorder outputs that may have completed out-of-order between the target half and the source half.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformBlock`2.m_source">
            <summary>The source side.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="transform">The function to invoke with each data element received.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="transform">The function to invoke with each data element received.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="transform">The function to invoke with each data element received.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="transform">The function to invoke with each data element received.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Delegate,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="transform">The function to invoke with each data element received.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ProcessMessage(System.Func{`0,`1},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Processes the message with a user-provided transform function that returns a TOutput.</summary>
            <param name="transform">The transform function to use to process the message.</param>
            <param name="messageWithId">The message to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ProcessMessageWithTask(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Processes the message with a user-provided transform function that returns a task of TOutput.</summary>
            <param name="transform">The transform function to use to process the message.</param>
            <param name="messageWithId">The message to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.AsyncCompleteProcessMessageWithTask(System.Threading.Tasks.Task{`1},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Completes the processing of an asynchronous message.</summary>
            <param name="completed">The completed task storing the output data generated for an input message.</param>
            <param name="messageWithId">The originating message</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
            <summary>
        Gets the number of input items waiting to be processed by this block.
      </summary><remarks>
        The InputCount does not include any items currently being processed by the block or any items that 
        have already been processed by the block.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView">
            <summary>Provides a debugger type proxy for the TransformBlock.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.m_targetDebuggingInformation">
            <summary>The target half of the block being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.#ctor(System.Threading.Tasks.Dataflow.TransformBlock{`0,`1})">
            <summary>Initializes the debug view.</summary>
            <param name="transformBlock">The transform being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.NumberOfOutstandingInputOperations">
            <summary>Gets the number of oustanding input operations.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.DebugView.NextMessageReservedFor">
            <summary>Gets the target that holds a reservation on the next message, if any.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
            <summary>
            Provides options used to configure the execution of dataflow blocks.
            </summary>
            <remarks>
            <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/> is immutable and can only be configured through its constructors.  When specific configuration options
            are not accepted by the constructor, the following defaults are used:
            <list type="table">
                <listheader>
                    <term>Options</term>
                    <description>Default</description>
                </listheader>
                <item>
                    <term>TaskScheduler</term>
                    <description><see cref="P:System.Threading.Tasks.TaskScheduler.Default"/></description>
                </item>
                <item>
                    <term>MaxDegreeOfParallelism</term>
                    <description>1</description>
                </item>
                <item>
                    <term>MaxMessagesPerTask</term>
                    <description>DataflowBlockOptions.UnboundedMessagesPerTask (-1)</description>
                </item>
                <item>
                    <term>CancellationToken</term>
                    <description><see cref="P:System.Threading.CancellationToken.None"/></description>
                </item>
                <item>
                    <term>Greedy</term>
                    <description>true</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.UnboundedDegreeOfParallelism">
            <summary>A constant used to specify an unlimited degree of parallelism. This field is constant.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.UnboundedMessagesPerTask">
            <summary>A constant used to specify an unlimited number of messages per task. This field is constant.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DEFAULT_MAX_DEGREE_OF_PARALLELISM">
            <summary>The default MaxDegreeOfParallelism value to use when one isn't provided.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DEFAULT_MAX_MESSAGES_PER_TASK">
            <summary>The default MaxMessagesPerTask value to use when one isn't provided.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DEFAULT_TASK_SCHEDULER">
            <summary>The default TaskScheduler value to use when one isn't provided.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DEFAULT_CANCELLATION_TOKEN">
            <summary>The default CancellationToken value to use when one isn't provided.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DEFAULT_GREEDY">
            <summary>The default Greedy value to use when one isn't provided.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.s_defaultOptions">
            <summary>Default options.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.m_taskScheduler">
            <summary>The scheduler to use for scheduling tasks to process messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.m_maxDegreeOfParallelism">
            <summary>The maximum number of tasks that may be used concurrently to process messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.m_maxMessagesPerTask">
            <summary>The maximum number of messages that may be processed per task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.m_cancellationToken">
            <summary>The cancellation token to monitor for cancellation requests.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.m_greedy">
            <summary>Whether the block should greedily consume offered messages.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks to process messages.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks to process messages.</param>
            <param name="maxDegreeOfParallelism">The maximum number of messages that may be processed by the block concurrently.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxDegreeOfParallelism"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks to process messages.</param>
            <param name="maxDegreeOfParallelism">The maximum number of messages that may be processed by the block concurrently.</param>
            <param name="maxMessagesPerTask">The maximum number of messages that may be processed per task.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxDegreeOfParallelism"/> must be positive.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxMessagesPerTask"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks to process messages.</param>
            <param name="maxDegreeOfParallelism">The maximum number of messages that may be processed by the block concurrently.</param>
            <param name="maxMessagesPerTask">The maximum number of messages that may be processed per task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxDegreeOfParallelism"/> must be positive or -1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxMessagesPerTask"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks to process messages.</param>
            <param name="maxDegreeOfParallelism">The maximum number of messages that may be processed by the block concurrently.</param>
            <param name="maxMessagesPerTask">The maximum number of messages that may be processed per task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <param name="greedy">
            true if the block should greedily consume offered messages; otherwise, false.
            Some blocks may not support non-greedy behavior.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxDegreeOfParallelism"/> must be positive or -1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxMessagesPerTask"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.GetUsableMaxMessagesPerTask">
            <summary>Gets a MaxMessagesPerTask value that may be used for comparison purposes.</summary>
            <returns>The maximum value, usable for comparison purposes.</returns>
            <remarks>Unlinke MaxMessagesPerTask, this property will always return a positive value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.GetUsableMaxDegreeOfParallelism">
            <summary>Gets a MaxDegreeOfParallelism value that may be used for comparison purposes.</summary>
            <returns>The maximum value, usable for comparison purposes.</returns>
            <remarks>Unlinke MaxDegreeOfParallelism, this property will always return a positive value.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
            <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxDegreeOfParallelism">
            <summary>Gets the maximum number of messages that may be processed by the block concurrently.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
            <summary>Gets the maximum number of messages that may be processed per task.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
            <summary>Gets the <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Greedy">
            <summary>Gets the Boolean value to use to determine whether to greedily consume offered messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Default">
            <summary>Gets the default set of <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.SupportsParallelExecution">
            <summary>Gets whether these options support parallel execution.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.IsCancellationRequestedForDebugger">
            <summary>Called by debugger display attribute to show whether cancellation has been requested.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView">
            <summary>A debugger type proxy for DataflowBlockOptions.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.m_options">
            <summary>The options.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the debugger type proxy.</summary>
            <param name="dataflowBlockOptions">The options to be shown.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.MaxDegreeOfParallelism">
            <summary>Gets the maximum numger of tasks that ay be used concurrently to process messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.MaxMessagesPerTask">
            <summary>Gets the maximum number of messages that may be processed per task.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.TaskScheduler">
            <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.CancellationToken">
            <summary>Gets the <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.DebugView.Greedy">
            <summary>Gets the Boolean value to use to determine whether to greedily consume offered messages.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformManyBlock`2.m_target">
            <summary>The target side.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformManyBlock`2.m_reorderingBuffer">
            <summary>Buffer used to reorder outputs that may have completed out-of-order between the target half and the source half.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformManyBlock`2.m_source">
            <summary>The source side.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/> with the specified function.</summary>
            <param name="transform">
            The function to invoke with each data element received.  All of the data from the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/> with the specified function.</summary>
            <param name="transform">
            The function to invoke with each data element received.  All of the data from the returned in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.
            </param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/> with the specified function.</summary>
            <param name="transform">
            The function to invoke with each data element received. All of the data asynchronously returned in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/> with the specified function.</summary>
            <param name="transform">
            The function to invoke with each data element received. All of the data asynchronously returned in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.
            </param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Delegate,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/> with the specified function.</summary>
            <param name="transform">The function to invoke with each data element received.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ProcessMessage(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Processes the message with a user-provided transform function that returns an enumerable.</summary>
            <param name="transformFunction">The transform function to use to process the message.</param>
            <param name="messageWithId">The message to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ProcessMessageWithTask(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Processes the message with a user-provided transform function that returns an observable.</summary>
            <param name="function">The transform function to use to process the message.</param>
            <param name="messageWithId">The message to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.AsyncCompleteProcessMessageWithTask(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Completes the processing of an asynchronous message.</summary>
            <param name="completed">The completed task storing the output data generated for an input message.</param>
            <param name="messageWithId">The originating message</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
            <summary>
        Gets the number of input items waiting to be processed by this block.
      </summary><remarks>
        The InputCount does not include any items currently being processed by the block or any items that 
        have already been processed by the block.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView">
            <summary>Provides a debugger type proxy for the TransformManyBlock.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.m_targetDebuggingInformation">
            <summary>The target half of the block being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.#ctor(System.Threading.Tasks.Dataflow.TransformManyBlock{`0,`1})">
            <summary>Initializes the debug view.</summary>
            <param name="transformManyBlock">The transform being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.NumberOfOutstandingInputOperations">
            <summary>Gets the task being used for input processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.DebugView.NextMessageReservedFor">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Action`1"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data operated on by this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.ActionBlock`1.m_target">
            <summary>The core implementation of this message block.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/> with the specified <see cref="T:System.Action`1"/>.</summary>
            <param name="action">The action to invoke with each data element received.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/> with the specified <see cref="T:System.Action`1"/>.</summary>
            <param name="action">The action to invoke with each data element received.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="action">The action to invoke with each data element received.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/> with the specified <see cref="T:System.Func`2"/>.</summary>
            <param name="action">The action to invoke with each data element received.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ProcessMessage(System.Action{`0},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Processes the message with a user-provided action.</summary>
            <param name="action">The action to use to process the message.</param>
            <param name="messageWithId">The message to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ProcessMessageWithTask(System.Func{`0,System.Threading.Tasks.Task},System.Collections.Generic.KeyValuePair{`0,System.Int64})">
            <summary>Processes the message with a user-provided action that returns a task.</summary>
            <param name="action">The action to use to process the message.</param>
            <param name="messageWithId">The message to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.AsyncCompleteProcessMessageWithTask(System.Threading.Tasks.Task)">
            <summary>Completes the processing of an asynchronous message.</summary>
            <param name="completed">The completed task.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
            <summary>
        Gets the number of input items waiting to be processed by this block.
      </summary><remarks>
        The InputCount does not include any items currently being processed by the block or any items that 
        have already been processed by the block.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed. This must only be used from the debugger.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView">
            <summary>Provides a debugger type proxy for the Call.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.m_debugInfo">
            <summary>The target being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.ActionBlock{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="actionBlock">The target being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.NumberOfOutstandingInputOperations">
            <summary>Gets the number of oustanding input operations.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose">
            <summary>An IDisposable that will run an Action delegate when disposed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.s_empty">
            <summary>An IDisposable that does nothing.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.m_disposeDelegate">
            <summary>The action to run when disposed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.m_state">
            <summary>Optional state to be passed to the dispose delegate.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.#ctor(System.Action{System.Object},System.Object)">
            <summary>Initializes the ActionOnDispose.</summary>
            <param name="actionWithState">The action to run when disposed.</param>
            <param name="state">State to pass to the action when it's invoked.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.System#IDisposable#Dispose">
            <summary>Invoke the action.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.Empty">
            <summary>Gets an IDisposable that does nothing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.ActionOnDispose.Disposed">
            <summary>Gets whether the IDisposable has been disposed.</summary>
        </member>
        <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
            <summary>
            Provides concurrent and exclusive task schedulers that coordinate to execute
            tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.UNLIMITED_PROCESSING">
            <summary>A constant value used to signal unlimited processing.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.EXCLUSIVE_PROCESSING_SENTINEL">
            <summary>Constant used for m_processingCount to indicate that an exclusive task is being processed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DEFAULT_MAXITEMSPERTASK">
            <summary>Default MaxItemsPerTask to use for processing if none is specified.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_syncObj">
            <summary>Synchronizes all activity in this type and its generated schedulers.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_concurrentTaskScheduler">
            <summary>The scheduler used to queue and execute "concurrent" tasks that may run concurrently with other concurrent tasks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_exclusiveTaskScheduler">
            <summary>The scheduler used to queue and execute "exclusive" tasks that must run exclusively while no other tasks for this pair are running.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_underlyingTaskScheduler">
            <summary>The underlying task scheduler to which all work should be scheduled.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_maxConcurrencyLevel">
            <summary>
            The maximum number of tasks allowed to run concurrently.  This only applies to concurrent tasks, 
            since exlusive tasks are inherently limited to 1.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_maxItemsPerTask">
            <summary>The maximum number of tasks we can process before recyling our runner tasks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_processingCount">
            <summary>
            If positive, it represents the number of concurrently running concurrent tasks.
            If negative, it means an exclusive task has been scheduled.
            If 0, nothing has been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.m_disposed">
            <summary>Whether the scheduler has been disposed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DEFAULT_MAXCONCURRENCYLEVEL">
            <summary>Default MaximumConcurrencyLevel to use for processing if none is specified.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DEFAULT_TASKSCHEDULER">
            <summary>Default TaskScheduler to use for processing if none is specified.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
            <summary>
            Initializes the ConcurrentExclusiveSchedulerPair.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the ConcurrentExclusiveSchedulerPair to target the specified scheduler.
            </summary>
            <param name="taskScheduler">The target scheduler on which this pair should execute.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
            <summary>
            Initializes the ConcurrentExclusiveSchedulerPair to target the specified scheduler with a maximum concurrency level.
            </summary>
            <param name="taskScheduler">The target scheduler on which this pair should execute.</param>
            <param name="maxConcurrencyLevel">The maximum number of tasks to run concurrently.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
            <summary>
            Initializes the ConcurrentExclusiveSchedulerPair to target the specified scheduler with a maximum 
            concurrency level and a maximum number of scheduled tasks that may be processed as a unit.
            </summary>
            <param name="taskScheduler">The target scheduler on which this pair should execute.</param>
            <param name="maxConcurrencyLevel">The maximum number of tasks to run concurrently.</param>
            <param name="maxItemsPerTask">The maximum number of tasks to process for each underlying scheduled task used by the pair.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Dispose">
            <summary>Disposes of the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Dispose(System.Boolean)">
            <summary>Disposes of the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.CleanupStateIfDisposedAndQuiesced">
            <summary>
            Cleans up state if and only if there's no processing currently happening
            and no more to be done later.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ProcessAsyncIfNecessary(System.Boolean)">
            <summary>Notifies the pair that new work has arrived to be processed.</summary>
            <param name="fairly">Whether tasks should be scheduled fairly with regards to other tasks.</param>
            <remarks>Must only be called while holding the lock.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ProcessExclusiveTasksShim(System.Object)">
            <summary>Shim that delegates to ProcessExclusiveTasks.</summary>
            <param name="pair">The pair object on which to call ProcessExclusiveTasks.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ProcessExclusiveTasks">
            <summary>
            Processes exclusive tasks serially until either there are no more to process
            or we've reached our user-specified maximum limit.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ProcessConcurrentTasksShim(System.Object)">
            <summary>Shim that delegates to ProcessConcurrentTasks.</summary>
            <param name="pair">The pair object on which to call ProcessConcurrentTasks.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ProcessConcurrentTasks">
            <summary>
            Processes concurrent tasks serially until either there are no more to process,
            we've reached our user-specified maximum limit, or exclusive tasks have arrived.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this pair
            that may run concurrently with other tasks on this pair.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this pair
            that must run exclusively with regards to other tasks on this pair.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentTaskCountForDebugger">
            <summary>Gets the number of tasks waiting to run concurrently.</summary>
            <remarks>This does not take the necessary lock, as it's only called from under the debugger.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveTaskCountForDebugger">
            <summary>Gets the number of tasks waiting to run exclusively.</summary>
            <remarks>This does not take the necessary lock, as it's only called from under the debugger.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ModeForDebugger">
            <summary>Gets an enumeration for debugging that represents the current state of the scheduler pair.</summary>
            <remarks>This is only for debugging.  It does not take the necessary locks to be useful for runtime usage.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler">
            <summary>
            A scheduler shim used to queue tasks to the pair and execute those tasks on request of the pair.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.m_pair">
            <summary>The parent pair.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.m_maxConcurrencyLevel">
            <summary>The maximum concurrency level for the scheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.m_processingTaskOnCurrentThread">
            <summary>Whether a Task from this scheduler is currently being processed on this thread.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.m_tasks">
            <summary>Gets the queue of tasks for this scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.#ctor(System.Threading.Tasks.ConcurrentExclusiveSchedulerPair,System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="pair">The parent pair.</param>
            <param name="maxConcurrencyLevel">The maximum degree of concurrency this scheduler may use.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Executes a task on this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute the task synchronously on this scheduler.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued to the scheduler.</param>
            <returns>true if the task could be executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.TryExecuteTaskShim(System.Object)">
            <summary>Shim used to invoke this.TryExecuteTask(task).</summary>
            <param name="state">A tuple of the ConcurrentExclusiveTaskScheduler and the task to execute.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
            <remarks>
            This method is separated out not because of performance reasons but so that
            the SecuritySafeCritical attribute may be employed.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.GetScheduledTasks">
            <summary>Gets for debugging purposes the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of the tasks queued.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.Dispose">
            <summary>Disposes of the resources used by this scheduler.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level this scheduler is able to support.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.CountForDebugger">
            <summary>Gets the number of tasks queued to this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.DebugView">
            <summary>Provides a debug view for ConcurrentExclusiveTaskScheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.DebugView.m_taskScheduler">
            <summary>The scheduler being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.DebugView.#ctor(System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler)">
            <summary>Initializes the debug view.</summary>
            <param name="scheduler">The scheduler being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.DebugView.MaximumConcurrencyLevel">
            <summary>Gets this pair's maximum allowed concurrency level.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.DebugView.ScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveTaskScheduler.DebugView.SchedulerPair">
            <summary>Gets the scheduler pair with which this scheduler is associated.</summary>
        </member>
        <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView">
            <summary>Provides a debug view for ConcurrentExclusiveSchedulerPair.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.m_pair">
            <summary>The pair being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.#ctor(System.Threading.Tasks.ConcurrentExclusiveSchedulerPair)">
            <summary>Initializes the debug view.</summary>
            <param name="pair">The pair being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.Mode">
            <summary>Gets a representation of the execution state of the pair.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.ScheduledExclusive">
            <summary>Gets the number of tasks waiting to run exclusively.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.ScheduledConcurrent">
            <summary>Gets the number of tasks waiting to run concurrently.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.CurrentlyExecutingTaskCount">
            <summary>Gets the number of tasks currently being executed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugView.TargetScheduler">
            <summary>Gets the underlying task scheduler that actually executes the tasks.</summary>
        </member>
        <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugMode">
            <summary>Provides an enumeration that represents the current state of the scheduler pair.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugMode.NotCurrentlyProcessing">
            <summary>The scheduler pair is currently dormant, with no work scheduled.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugMode.ProcessingExclusiveTask">
            <summary>The scheduler pair has queued processing for exclusive tasks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugMode.ProcessingConcurrentTasks">
            <summary>The scheduler pair has queued processing for concurrent tasks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.DebugMode.Disposed">
            <summary>Disposal has been requested.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
            <summary>Provides a dataflow block that batches inputs into arrays.</summary>
            <typeparam name="T">Specifies the type of data put into batches.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.DEFAULT_DECLINEAFTERONEBATCH">
            <summary>The default value for "declineAfterOneBatch" when not specified.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.m_target">
            <summary>The target half of this batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.m_source">
            <summary>The source half of this batch.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> with the specified batch size.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> with the specified batch size and declining option.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="declineAfterOneBatch">true if the <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> should stop accepting new inputs after a single batch is generated.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Boolean,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> with the  specified batch size, declining option, and block options.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="declineAfterOneBatch">true if the <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> should stop accepting new inputs after a single batch is generated.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0[]},System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0[]},System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0[]},System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
            <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/>.</summary>
            <remarks>
            If the number of items provided to the block is not evenly divisible by the batch size provided
            to the block's constructor, the block's final batch may contain fewer than the requested number of items.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DeclineAfterOneBatch">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> stops accepting messages after a single batch is generated.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView">
            <summary>Provides a debugger type proxy for the Batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.m_targetDebuggingInformation">
            <summary>The batch being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.BatchBlock{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="batch">The batch being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.TaskForInputProcessing">
            <summary>Gets the task being used for input processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.PostponedMessages">
            <summary>Gets the messages postponed by this batch.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.DebugView.NextMessageReservedFor">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore">
            <summary>Provides the core target implementation for a Batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_messages">
            <summary>The messages in this target.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_completionTask">
            <summary>A task representing the completion of the block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_cachedProcessMessagesLoopDelegate">
            <summary>A cached delegate used to invoke the process messages loop.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_owningBatch">
            <summary>The target that owns this target core.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_batchSize">
            <summary>The batch size.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_declineAfterOneBatch">
            <summary>Whether the Batch should shut down after a single batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_nonGreedyState">
            <summary>State used when in non-greedy mode.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_dataflowBlockOptions">
            <summary>The options associated with this block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_batchCompletedAction">
            <summary>The action invoked with a completed batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_taskForInputProcessing">
            <summary>The task used to process messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_decliningPermanently">
            <summary>Whether to stop accepting new messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.m_batchesCompleted">
            <summary>Whether we've completed at least one batch.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.#ctor(System.Threading.Tasks.Dataflow.BatchBlock{`0},System.Int32,System.Boolean,System.Action{`0[]},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes this target core with the specified configuration.</summary>
            <param name="owningBatch">The owning batch target.</param>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="unlinkAfterOneBatch">true if the <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> should stop accepting new inputs after a single batch.</param>
            <param name="batchCompletedAction">The delegate to invoke when a batch is completed.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.CompleteBlockIfPossible">
            <summary>Completes the block once all completion conditions are met.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.ProcessAsyncIfNecessary(System.Boolean)">
            <summary>Called when new messages are available to be processed.</summary>
            <param name="isReplacementReplica">Whether this call is the continuation of a previous message loop.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.ProcessMessagesLoop(System.Object)">
            <summary>Task body used to process messages.</summary>
            <param name="taskObjectState">Task object state that's ignored in this method but which helps debugging.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.MakeBatchIfPossible(System.Boolean)">
            <summary>Create a batch from the available items.</summary>
            <param name="evenIfFewerThanBatchSize">
            Whether to make a batch even if there are fewer than batchSize items available.
            </param>
            <returns>true if a batch was created and published; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.RetrievePostponedItemsInNonGreedyMode">
            <summary>Retrieves postponed items if we have enough to make a batch.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.GetDebuggingInformation">
            <summary>Gets information about this helper to be used for display in a debugger.</summary>
            <returns>Debugging information about this target.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.IncomingLock">
            <summary>Gets the object used as the incoming lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.BatchSize">
            <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/>.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.Greedy">
            <summary>
            Gets whether this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> consumes items from its source greedily or whether it waits until
            there are enough linked sources with data available concurrently to atomically fulfil a batch.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DeclineAfterOneBatch">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1"/> completes after a single batching operation.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.NonGreedyState">
            <summary>State used only when in non-greedy mode.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.NonGreedyState.PostponedMessages">
            <summary>Collection of postponed messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.NonGreedyState.PostponedSourcesTemp">
            <summary>A temporary list used in non-greedy mode when consuming postponed messages to store sources with postponed messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.NonGreedyState.ReservedSourcesTemp">
            <summary>A temporary list used in non-greedy mode when consuming postponed messages to store successfully reserved messages.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation">
            <summary>Provides a wrapper for commonly needed debugging information.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.m_target">
            <summary>The target being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.#ctor(System.Threading.Tasks.Dataflow.BatchBlock{`0}.BatchBlockTargetCore)">
            <summary>Initializes the debugging helper.</summary>
            <param name="target">The target being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.InputCount">
            <summary>Gets the number of messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.TaskForInputProcessing">
            <summary>Gets the task being used for input processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.PostponedMessages">
            <summary>Gets the collection of postponed messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchBlockTargetCore.DebuggingInformation.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1">
            <summary>Provides a buffer that reorders items according to their incoming IDs.</summary>
            <typeparam name="TOutput">Specifies the type of data stored in the items being reordered.</typeparam>
            <remarks>
            This type expects the first item to be ID==0 and for all subsequent items
            to increase IDs sequentially.
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.m_reorderingBuffer">
            <summary>A reordering buffer used when parallelism is employed and items may be completed out-of-order.</summary>
            <remarks>Also serves as the sync object to protect the contents of this class.</remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.m_outputAction">
            <summary>Action used to output items in order.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.m_nextReorderedIdToOutput">
            <summary>The ID of the next item that should be released from the reordering buffer.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.#ctor(System.Action{`0})">
            <summary>Initializes the reordering buffer.</summary>
            <param name="outputAction">The action to invoke when the next in-order item is available to be output.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.AddItem(System.Int64,`0)">
            <summary>Stores the next item as it completes processing.</summary>
            <param name="id">The ID of the item.</param>
            <param name="item">
            The completed item. null is allowed and means that the input item with that ID
            completed but with error, so we should skip over it when outputting data.
            </param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.HasItems">
            <summary>Gets whether the reordering buffer is currently storing any items.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.CountForDebugging">
            <summary>Gets a item count for debugging purposes.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.DebugView">
            <summary>Provides a debugger type proxy for the buffer.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.DebugView.m_buffer">
            <summary>The buffer being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="buffer">The buffer being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.DebugView.ItemsBuffered">
            <summary>Gets a dictionary of buffered items and their reordering IDs.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.ReorderingBuffer`1.DebugView.NextIdRequired">
            <summary>Gets the next ID required for outputting.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
            <summary>Provides an unbounded buffer for storing data.</summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BufferBlock`1.m_target">
            <summary>The target side.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BufferBlock`1.m_source">
            <summary>The source side.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1"/>.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1"/> with the specified <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
            <summary>Gets the number of items currently stored in the buffer.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.CountForDebugger">
            <summary>Gets the number of messages in the buffer.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView">
            <summary>Provides a debugger type proxy for the BufferBlock.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.m_sourceDebuggingInformation">
            <summary>The buffer's source half.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.BufferBlock{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="bufferBlock">The BufferBlock being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.OutputQueue">
            <summary>Gets the messages in the buffer.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.DebugView.NextMessageReservedFor">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1">
            <summary>Provides the core of a target implementation that passes work through to delegates.</summary>
            <typeparam name="T">Specifies the type of data accepted by the target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.m_incomingLock">
            <summary>Lock used to synchronize incoming requests.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.m_owningTarget">
            <summary>The target associated with this target core.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.m_addMessageAction">
            <summary>The delegate to invoke when a new message has been consumed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.m_declinePermanentlyAction">
            <summary>The delegate to invoke when we're done adding through this target.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.m_decliningPermanently">
            <summary>Whether all future messages should be declined.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.#ctor(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Action{System.Threading.Tasks.Dataflow.DataflowMessage{`0}},System.Action)">
            <summary>Initializes this target core.</summary>
            <param name="owningTarget">The owning target.</param>
            <param name="addMessage">The delegate to invoke when a new message has been consumed.</param>
            <param name="declinePermanently">The delegate to invoke when we're done adding through this target.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.PassthroughTargetCore`1.IsDecliningPermanently">
            <summary>Gets whether all future messages will be declined.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.</summary>
            <param name="source">The source from which to link.</param>
            <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect the source.</param>
            <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
            <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> using the specified filter.</summary>
            <param name="source">The source from which to link.</param>
            <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect the source.</param>
            <param name="predicate">The filter a message must pass in order for it to propagate from the source to the target.</param>
            <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0},System.Boolean)">
            <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> using the specified filter.</summary>
            <param name="source">The source from which to link.</param>
            <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect the source.</param>
            <param name="predicate">The filter a message must pass in order for it to propagate from the source to the target.</param>
            <param name="discardsMessages">true if messages that don't meet the predicate are discarded; otherwise, false, to decline such messages.</param>
            <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
            <summary>Asynchronously posts a message to the target message block, allowing for postponement.</summary>
            <typeparam name="TInput">Specifies the type of the data to post to the target.</typeparam>
            <param name="target">The target to which to post the data.</param>
            <param name="item">The item being offered to the target.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous post.  If the target
            accepts and consumes the posted element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)"/>, upon return
            from the call the resulting Task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result">Result</see> 
            property will return true.  If the target declines the posted element durign the call, upon return from the call the resulting Task will
            be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result">Result</see> property will return false. If the target
            postpones the message, the message will be buffered until such time that the target consumes or releases the posted message, at which
            point the Task will complete, with its Result indicating whether the message was consumed.  If the target
            never consumes or releases the message, the returned task will never complete.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.TryReceive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},``0@)">
            <summary>
            Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
            </summary>
            <param name="source">The source from which to receive.</param>
            <param name="item">The item received from the source.</param>
            <returns>true if an item could be received; otherwise, false.</returns>
            <remarks>
            This method does not block waiting for the source to provide an item.
            It will return immediately whether or not an element was available.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
            <summary>Asynchronously receives a value from the specified source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to asynchronously receive.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous receive operation.  When an item is successfully received from the source,
            the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result">Result</see> will return the received item.  If an item cannot be retrieved,
            because the source is empty and completed, the returned task will be canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
            <summary>Asynchronously receives a value from the specified source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to asynchronously receive.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the receive operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous receive operation.  When an item is successfully received from the source,
            the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result">Result</see> will return the received item.  If an item cannot be retrieved,
            either because cancellation is requested or the source is empty and completed, the returned task will be canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
            <summary>Asynchronously receives a value from the specified source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to asynchronously receive.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous receive operation.  When an item is successfully received from the source,
            the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result">Result</see> will return the received item.  If an item cannot be retrieved,
            either because the timeout expires or the source is empty and completed, the returned task will be canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            timeout is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Asynchronously receives a value from the specified source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to asynchronously receive.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the receive operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous receive operation.  When an item is successfully received from the source,
            the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result">Result</see> will return the received item.  If an item cannot be retrieved,
            either because the timeout expires, cancellation is requested, or the source is empty and completed, the returned task will be canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            timeout is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
            <summary>Synchronously receives an item from the source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to receive.</param>
            <returns>The received item.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
            <summary>Synchronously receives an item from the source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to receive.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the receive operation.</param>
            <returns>The received item.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled before an item was received from the source.</exception>
            <remarks>
            If the source successfully offered an item that was received by this operation, it will be returned, even if a concurrent cancellation request occurs.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
            <summary>Synchronously receives an item from the source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to receive.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <returns>The received item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            timeout is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
            <exception cref="T:System.TimeoutException">The specified timeout expired before an item was received from the source.</exception>
            <remarks>
            If the source successfully offered an item that was received by this operation, it will be returned, even if a concurrent timeout occurs.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Synchronously receives an item from the source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to receive.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the receive operation.</param>
            <returns>The received item.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            timeout is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
            <exception cref="T:System.TimeoutException">The specified timeout expired before an item was received from the source.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled before an item was received from the source.</exception>
            <remarks>
            If the source successfully offered an item that was received by this operation, it will be returned, even if a concurrent timeout or cancellation request occurs.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveCore``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Receives an item from the source.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to receive.</param>
            <param name="attemptTryReceive">Whether to first attempt using TryReceive to get a value from the source.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the receive operation.</param>
            <returns>A TaskCompletionSource for the receive operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveCoreByLinking``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>Receives an item from the source by linking a temporary target from it.</summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source from which to receive.</param>
            <param name="target">The target to link from the source.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the receive operation.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
            <summary>
            Provides a <see cref="T:System.Threading.Tasks.Task`1"/> 
            that asynchronously monitors the source for available output.
            </summary>
            <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
            <param name="source">The source to monitor.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that informs of whether and when
            more output is available.  When the task completes, if it's Result is true, more output 
            is available in the source (though another consumer of the source may retrieve the data).  
            If it returns false, more output is not and will never be available, due to the source 
            completing prior to output being available.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
            <summary>Encapsulates a target and a source into a single propagator.</summary>
            <typeparam name="TInput">Specifies the type of input expected by the target.</typeparam>
            <typeparam name="TOutput">Specifies the type of output produced by the source.</typeparam>
            <param name="target">The target to encapsulate.</param>
            <param name="source">The source to encapsulate.</param>
            <returns>The encapsulated target and source.</returns>
            <remarks>
            This method does not in any way connect the target to the source. It creates a
            propagator block whose target methods delegate to the specified target and whose
            source methods delegate to the specified source.  Any connection between the target
            and the source is left for the developer to explicitly provide.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``0},System.Action{``1})">
            <summary>Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
            <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
            <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
            <param name="source1">The first source.</param>
            <param name="source2">The second source.</param>
            <param name="action1">The handler to execute on data from the first source.</param>
            <param name="action2">The handler to execute on data from the second source.</param>
            <returns>
            <para>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous choice.
            If both sources are completed prior to choice completing, 
            the resulting task will be canceled. When one of the sources has data available and successfully propagates 
            it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,
            the task will end in the Faulted state containing the unhandled exception, otherwise the task
            will end with its <see cref="P:System.Threading.Tasks.Task`1.Result"/> set to either 0 or 1 to
            represent the first or second source, respectively.
            </para>
            <para>
            This method will only consume an element from one of the two data sources, never both.
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action2"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``0},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
            <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
            <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
            <param name="source1">The first source.</param>
            <param name="source2">The second source.</param>
            <param name="action1">The handler to execute on data from the first source.</param>
            <param name="action2">The handler to execute on data from the second source.</param>
            <param name="dataflowBlockOptions">The options with which to configure this choice.</param>
            <returns>
            <para>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous choice.
            If both sources are completed prior to choice completing, or if the CancellationToken
            provided as part of <paramref name="dataflowBlockOptions"/> is canceled prior to the choice completing,
            the resulting task will be canceled. When one of the sources has data available and successfully propagates 
            it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,
            the task will end in the Faulted state containing the unhandled exception, otherwise the task
            will end with its <see cref="P:System.Threading.Tasks.Task`1.Result"/> set to either 0 or 1 to
            represent the first or second source, respectively.
            </para>
            <para>
            This method will only consume an element from one of the two data sources, never both.
            If cancellation is requested after an element has been received, the cancellation request will be ignored,
            and the relevant handler will be allowed to execute. 
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``0},System.Action{``1},System.Action{``2})">
            <summary>Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
            <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
            <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
            <typeparam name="T3">Specifies type of data contained in the third source.</typeparam>
            <param name="source1">The first source.</param>
            <param name="source2">The second source.</param>
            <param name="source3">The third source.</param>
            <param name="action1">The handler to execute on data from the first source.</param>
            <param name="action2">The handler to execute on data from the second source.</param>
            <param name="action3">The handler to execute on data from the third source.</param>
            <returns>
            <para>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous choice.
            If all sources are completed prior to choice completing, 
            the resulting task will be canceled. When one of the sources has data available and successfully propagates 
            it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,
            the task will end in the Faulted state containing the unhandled exception, otherwise the task
            will end with its <see cref="P:System.Threading.Tasks.Task`1.Result"/> set to the 0-based index of the source.
            </para>
            <para>
            This method will only consume an element from one of the data sources, never more than one.
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source3"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action3"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``0},System.Action{``1},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
            <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
            <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
            <typeparam name="T3">Specifies type of data contained in the third source.</typeparam>
            <param name="source1">The first source.</param>
            <param name="source2">The second source.</param>
            <param name="source3">The third source.</param>
            <param name="action1">The handler to execute on data from the first source.</param>
            <param name="action2">The handler to execute on data from the second source.</param>
            <param name="action3">The handler to execute on data from the third source.</param>
            <param name="dataflowBlockOptions">The options with which to configure this choice.</param>
            <returns>
            <para>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous choice.
            If all sources are completed prior to choice completing, or if the CancellationToken
            provided as part of <paramref name="dataflowBlockOptions"/> is canceled prior to the choice completing,
            the resulting task will be canceled. When one of the sources has data available and successfully propagates 
            it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,
            the task will end in the Faulted state containing the unhandled exception, otherwise the task
            will end with its <see cref="P:System.Threading.Tasks.Task`1.Result"/> set to the 0-based index of the source.
            </para>
            <para>
            This method will only consume an element from one of the data sources, never more than one.
            If cancellation is requested after an element has been received, the cancellation request will be ignored,
            and the relevant handler will be allowed to execute. 
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source3"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action1"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action2"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action3"/> is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.CreateChooseBranch``1(System.Runtime.CompilerServices.StrongBox{System.Threading.Tasks.Task},System.Threading.CancellationTokenSource,System.Threading.Tasks.TaskCompletionSource{System.Int32},System.Threading.Tasks.TaskScheduler,System.Int32,System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0})">
            <summary>Creates a target for a branch of a Choose.</summary>
            <typeparam name="T">Specifies the type of data coming through this branch.</typeparam>
            <param name="boxedCompleted">A strong box around the completed Task from any target. Also sync obj for access to the targets.</param>
            <param name="cts">The CancellationTokenSource used to issue tear down / cancellation requests.</param>
            <param name="result">The result task used to represent the overall Choose operation.</param>
            <param name="scheduler">The TaskScheduler on which to scheduler work.</param>
            <param name="branchId">The ID of this branch, used to complete the resultTask.</param>
            <param name="source">The source with which this branch is associated.</param>
            <param name="action">The action to run for a single element received from the source.</param>
            <returns>A task representing the branch.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1">
            <summary>Provides a synchronous filter for use in filtered LinkTos.</summary>
            <typeparam name="T">Specifies the type of data being filtered.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.m_source">
            <summary>The source connected with this filter.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.m_target">
            <summary>The target with which this block is associated.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.m_predicate">
            <summary>The predicate filter function to run for each message.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.m_discardsMessages">
            <summary>Whether to accept and drop messages that don't meet the filter.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.#ctor(System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Predicate{`0},System.Boolean)">
            <summary>Initializes the filter passthrough.</summary>
            <param name="source">The source connected to this filter.</param>
            <param name="target">The target to which filtered messages should be passed.</param>
            <param name="predicate">The predicate to run for each messsage.</param>
            <param name="discardsMessages">Whether to accept and drop messages that don't meet the filter.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.PredicateContextState">
            <summary>Manually closes over state necessary in FilteredLinkPropagator.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.PredicateContextState.Input">
            <summary>The input to be filtered.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.PredicateContextState.Predicate">
            <summary>The predicate function.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.PredicateContextState.Output">
            <summary>The result of the filtering operation.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.PredicateContextState.#ctor(`0,System.Predicate{`0})">
            <summary>Initializes the predicate state.</summary>
            <param name="input">The input to be filtered.</param>
            <param name="predicate">The predicate function.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.PredicateContextState.Run">
            <summary>Runs the predicate function over the input and stores the result into the output.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.DebugView">
            <summary>Provides a debugger type proxy for a filter.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.DebugView.m_filter">
            <summary>The filter.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="filter">The filter to view.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.DebugView.LinkedTarget">
            <summary>The linked target for this filter.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.FilteredLinkPropagator`1.DebugView.DiscardsMessages">
            <summary>Whether the filter is discarding messages.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1">
            <summary>
            Provides a source using by PostAsync that will buffer a single message and signal when it's been consumed.
            </summary>
            <remarks>This source must only be passed to a single target, and must only be used once.</remarks>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.m_message">
            <summary>The buffered message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.#ctor(System.Threading.Tasks.Dataflow.DataflowMessage{`0})">
            <summary>Initializes the source.</summary>
            <param name="message">The message to offer and buffer.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>Called by the target to consume the buffered message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>Called by the target to reserve the buffered message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>Called by the target to release a reservation on the buffered message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>Not supported.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.System#Threading#Tasks#Dataflow#IDataflowBlock#CompletionTask">
            <summary>Not supported.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.DebugView">
            <summary>Provides a debugger type proxy for the source.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.DebugView.m_source">
            <summary>The source.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="source">The source to view.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.DebugView.Message">
            <summary>The message buffered by the source.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsyncSource`1.DebugView.CompletionTask">
            <summary>The Task represented the posting of the message.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1">
            <summary>Provides a TaskCompletionSource that is also a dataflow target for use in ReceiveCore.</summary>
            <typeparam name="T">Specifies the type of data offered to the target.</typeparam>
            <remarks>
            Note that to avoid extra allocations for sync objects, this instance takes locks on itself.
            Should this ever be made more publicly accessible, that will need to change.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.#ctor">
            <summary>Initializes the target.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>Offers a message to be used to complete the TaskCompletionSource.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#DeclinePermanently">
            <summary>Completes the task due to being notified that no data will be received.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.TrySetExceptionForTimeout">
            <summary>Completes the task in a faulted state due to a timeout occurring.</summary>
            <returns>true if this operation completed the task; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.TrySetExceptionForSourceCompletion">
            <summary>Completes the task in a faulted state due to the source completing without providing any data.</summary>
            <returns>true if this operation completed the task; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.System#Threading#Tasks#Dataflow#IDataflowBlock#CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ReceiveTarget`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1">
            <summary>Provides a target used in HasMoreAsync operations.</summary>
            <typeparam name="T">Specifies the type of data in the data source being checked.</typeparam>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.#ctor">
            <summary>Initializes the target.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>Completes the task when offered a message (but doesn't consume the message).</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#DeclinePermanently">
            <summary>Completes the task with false since no further data will arrive.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.System#Threading#Tasks#Dataflow#IDataflowBlock#CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.OutputAvailableAsyncTarget`1.ResultForDebugger">
            <summary>Gets the result to display in the debugger.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2">
            <summary>Provides a dataflow block that encapsulates a target and a source to form a single propagator.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.m_target">
            <summary>The target half.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.m_source">
            <summary>The source half.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.TryReceive(System.Predicate{`1},`1@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`1},System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.DebugView">
            <summary>A debug view for the propagator.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.DebugView.m_propagator">
            <summary>The propagator being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.DebugView.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator{`0,`1})">
            <summary>Initializes the debug view.</summary>
            <param name="propagator">The propagator being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.DebugView.Target">
            <summary>The target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.EncapsulatingPropagator`2.DebugView.Source">
            <summary>The source.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1">
            <summary>Provides a dataflow target used by Choose to receive data from a single source.</summary>
            <typeparam name="T">Specifies the type of data offered to this target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1.m_completed">
            <summary>
            A wrapper for the task that represents the completed branch of this choice.
            The wrapper is also the sync object used to protect all choice branch's access to shared state.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1.#ctor(System.Runtime.CompilerServices.StrongBox{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>Initializes the target.</summary>
            <param name="completed">The completed wrapper shared between all choice branches.</param>
            <param name="cancellationToken">The cancellation token used to cancel this target.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>Called when this choice branch is being offered a message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1.DeclinePermanently">
            <summary>Called when this choice branch will never receive data.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.ChooseTarget`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.Common">
            <summary>Internal helper utilities.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.Common.EXCEPTIONDATAKEY_DATAFLOWMESSAGE">
            <summary>The name of the key in an Exception's Data collection used to store information on a dataflow message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.ContractAssertMonitorStatus(System.Object,System.Boolean)">
            <summary>Asserts that a given synchronization object is either held or not held.</summary>
            <param name="syncObj">The monitor to check.</param>
            <param name="held">Whether we want to assert that it's currently held or not held.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.GetNameForDebugger(System.Object)">
            <summary>Gets the name for the specified object, suitable to be rendered in a debugger window.</summary>
            <param name="obj">The object for which a name is needed.</param>
            <returns>The name of the object.</returns>
            <remarks>This is used from DebuggerDisplay attributes.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.GetAsyncStateObjectForBlockTask(System.Object)">
            <summary>Gets the object to attach to a Task for debugging purposes.</summary>
            <param name="obj">The object to be rendered as AsyncState in Parallel Tasks.</param>
            <returns>The name of the object.</returns>
            <remarks>
            While this is for debugging purposes, it's invoked in release mode, so it must be very fast.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.IsCooperativeCancellation(System.Exception)">
            <summary>
            Gets whether the exception represents a cooperative cancellation acknowledgement.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns>true if this exception represents a cooperative cancellation acknowledgement; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.WireCancellationToDeclinePermanently(System.Threading.CancellationToken,System.Threading.Tasks.Task,System.Action{System.Object},System.Object)">
            <summary>Registers a block for cancellation by declining permanently when cancellation is requested.</summary>
            <param name="cancellationToken">The block's cancellation token.</param>
            <param name="completionTask">The task that will complete when the block is completely done processing.</param>
            <param name="declinePermanentlyAction">An action that will decline permanently on the state passed to it.</param>
            <param name="declinePermanentlyState">The block on which to decline permanently.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.StoreDataflowMessageValueIntoExceptionData``1(System.Exception,``0)">
            <summary>Stores details on a dataflow message into an Exception's Data collection.</summary>
            <typeparam name="T">Specifies the type of data stored in the message.</typeparam>
            <param name="exc">The Exception whose Data collection should store message information.</param>
            <param name="messageValue">The message information to be stored.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.StoreDataflowMessageValueIntoAggregateExceptionData``1(System.AggregateException,``0)">
            <summary>Stores details on a dataflow message into an AggregateException's inner exceptions' Data collections.</summary>
            <typeparam name="T">Specifies the type of data stored in the message.</typeparam>
            <param name="aggregate">The AggregateException whose inner exceptions' Data collections should store message information.</param>
            <param name="messageValue">The message information to be stored.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.AddException(System.Collections.Generic.List{System.Exception}@,System.Exception)">
            <summary>Adds the exception to the list, first initializing the list if the list is null.</summary>
            <param name="list">The list to add the exception to, and initialize if null.</param>
            <param name="exception">The exception to add.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.AddException(System.Collections.Generic.List{System.Exception}@,System.AggregateException,System.Boolean)">
            <summary>Adds the exception to the list, first initializing the list if the list is null.</summary>
            <param name="list">The list to add the exception to, and initialize if null.</param>
            <param name="exception">The exception to add.</param>
            <param name="unwrapInnerExceptions">Whether to unwrap the inner exceptions and add them individuall or to add the aggregate itself.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.CreateUnlinker``1(System.Object,System.Threading.Tasks.Dataflow.Internal.TargetRegistry{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Creates an IDisposable that, when disposed, will acquire the outgoing lock while removing 
            the target block from the target registry.
            </summary>
            <typeparam name="TOutput">Specifies the type of data in the block.</typeparam>
            <param name="outgoingLock">The outgoing lock used to protect the target registry.</param>
            <param name="targetRegistry">The target registry from which the target should be removed.</param>
            <param name="targetBlock">The target to remove from the registry.</param>
            <returns>An IDisposable that will unregister the target block from the registry while holding the outgoing lock.</returns>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.Common.InfiniteTimeSpan">
            <summary>An infinite TimeSpan.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.IsValidTimeout(System.TimeSpan)">
            <summary>Validates that a timeout either is -1 or is non-negative and within the range of an Int32.</summary>
            <param name="timeout">The timeout to validate.</param>
            <returns>true if the timeout is valid; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.GetCreationOptionsForTask(System.Boolean)">
            <summary>Gets the options to use for tasks.</summary>
            <param name="isReplacementReplica">If this task is being created to replace another.</param>
            <remarks>
            These options should be used for all tasks that have the potential to run user code or
            that are repeatedly spawned and thus need a modicum of fair treatment.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.CreateCopyAndRun(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
            <summary>Runs the provided callback under a copy of the specified context.</summary>
            <param name="executionContext">The context to copy and utilize to run the callback.</param>
            <param name="callback">The callback to execute.</param>
            <param name="state">The state to pass to the callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.InvokeCallbackWithContext(System.Threading.ExecutionContext,System.Threading.ContextCallback)">
            <summary>Executes a callback delegate in the specified execution context.</summary>
            <param name="executionContext">The context in which to execute.  If null, the delegate will be invoked directly.</param>
            <param name="callback">The delegate to execute.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.InvokeCloningFunctionWithContext``1(System.Threading.ExecutionContext,System.Func{``0,``0},``0)">
            <summary>Executes a cloning function in the specified execution context.</summary>
            <param name="executionContext">The context in which to execute.  If null, the delegate will be invoked directly.</param>
            <param name="cloningFunction">The delegate to execute to clone the item.</param>
            <param name="item">The item to be cloned.</param>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.Common.CreateUnlinkerShim`1">
            <summary>Generic container a cached shim used by CreateDisposalAction.</summary>
            <typeparam name="TOutput">Specifies the type of data in the block.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.Common.CreateUnlinkerShim`1.Delegate">
            <summary>The body to use in ActionOnDispose.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.Common.CloningFunctionContextState`1">
            <summary>
            Provides a wrapper for use with CloneContextAndRun, alleviating the need for both
            a closure and a delegate to that closure to be allocated.
            </summary>
            <typeparam name="T">Specifies the type of the input and output data.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.Common.CloningFunctionContextState`1.Input">
            <summary>The input to be cloned.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.Common.CloningFunctionContextState`1.CloningFunction">
            <summary>The cloning function.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.Common.CloningFunctionContextState`1.Output">
            <summary>The result of the cloning operation.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.CloningFunctionContextState`1.#ctor(`0,System.Func{`0,`0})">
            <summary>Initializes the cloning state.</summary>
            <param name="input">The input to be cloned.</param>
            <param name="cloningFunction">The cloning function.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.Common.CloningFunctionContextState`1.Run">
            <summary>Runs the cloning function over the input and stores the result into the output.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
            <summary>
            Provides a dataflow block that batches a specified number of inputs of potentially differing types
            provided to one or more of its targets.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DEFAULT_DECLINEAFTERONEBATCH">
            <summary>The default value for "declineAfterOneBatch" when not specified.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.m_batchSize">
            <summary>The size of the batches generated by this BatchedJoin.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.m_declineAfterOneBatch">
            <summary>Whether the BatchedJoin completes after a single batching operation.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.m_target1">
            <summary>The target providing inputs of type T1.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.m_target2">
            <summary>The target providing inputs of type T2.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.m_source">
            <summary>The source side.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2"/> with the specified configuration.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2"/> with the specified configuration.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="declineAfterOneBatch">true if the BatchedJoin should stop accepting new inputs after a single batch is completed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Boolean,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2"/> with the specified configuration.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="declineAfterOneBatch">true if the BatchedJoin should stop accepting new inputs after a single batch is completed.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DeclinePermanentlyOnEachTarget">
            <summary>
            Invokes DeclinePermanently on each target
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
            <summary>Gets the size of the batches generated by this BatchedJoin.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DeclineAfterOneBatch">
            <summary>Gets whether the BatchedJoin completes after a single batching operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
            <summary>Gets a target that may be used to offer messages of the first type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
            <summary>Gets a target that may be used to offer messages of the second type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView">
            <summary>Provides a debugger type proxy for the Transform.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.m_batchedJoin">
            <summary>The block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.#ctor(System.Threading.Tasks.Dataflow.BatchedJoinBlock{`0,`1})">
            <summary>Initializes the debug view.</summary>
            <param name="batchedJoin">The batched join being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.Target1">
            <summary>Gets the first target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.Target2">
            <summary>Gets the second target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.DebugView.NextMessageReservedFor">
            <summary>Gets the target that holds a reservation on the next message, if any.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
            <summary>
            Provides a dataflow block that batches a specified number of inputs of potentially differing types
            provided to one or more of its targets.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
            <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DEFAULT_DECLINEAFTERONEBATCH">
            <summary>The default value for "declineAfterOneBatch" when not specified.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.m_batchSize">
            <summary>The size of the batches generated by this BatchedJoin.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.m_declineAfterOneBatch">
            <summary>Whether the BatchedJoin completes after a single batching operation.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.m_target1">
            <summary>The target providing inputs of type T1.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.m_target2">
            <summary>The target providing inputs of type T2.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.m_target3">
            <summary>The target providing inputs of type T3.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.m_source">
            <summary>The source side.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3"/> with the specified configuration.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3"/> with the specified configuration.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="declineAfterOneBatch">true if the BatchedJoin should stop accepting new inputs after a single batch is completed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Boolean,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3"/> with the specified configuration.</summary>
            <param name="batchSize">The number of items to group into a batch.</param>
            <param name="declineAfterOneBatch">true if the BatchedJoin should stop accepting new inputs after a single batch is completed.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize"/> must be positive.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DeclinePermanentlyOnEachTarget">
            <summary>
            Invokes DeclinePermanently on each target
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
            <summary>Gets the size of the batches generated by this BatchedJoin.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DeclineAfterOneBatch">
            <summary>Gets whether the BatchedJoin completes after a single batching operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
            <summary>Gets a target that may be used to offer messages of the first type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
            <summary>Gets a target that may be used to offer messages of the second type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
            <summary>Gets a target that may be used to offer messages of the third type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView">
            <summary>Provides a debugger type proxy for the Transform.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.m_batchedJoin">
            <summary>The block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.#ctor(System.Threading.Tasks.Dataflow.BatchedJoinBlock{`0,`1,`2})">
            <summary>Initializes the debug view.</summary>
            <param name="batchedJoin">The batched join being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.Target1">
            <summary>Gets the first target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.Target2">
            <summary>Gets the second target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.Target3">
            <summary>Gets the second target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.DebugView.NextMessageReservedFor">
            <summary>Gets the target that holds a reservation on the next message, if any.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1">
            <summary>Provides the target used in a BatchedJoin.</summary>
            <typeparam name="T">Specifies the type of data accepted by this target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.m_sharedResources">
            <summary>The shared resources used by all targets associated with the same batched join instance.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.m_decliningPermanently">
            <summary>Whether this target is declining future messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.m_messages">
            <summary>Input messages for the next batch.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.#ctor(System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources)">
            <summary>Initializes the target.</summary>
            <param name="sharedResources">The shared resources used by all targets associated with this batched join.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.GetAndEmptyMessages">
            <summary>Gets the messages buffered by this target and then empties the collection.</summary>
            <returns>The messages from the target.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.Count">
            <summary>Gets the number of messages buffered in this target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.System#Threading#Tasks#Dataflow#IDataflowBlock#CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.InputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.DebugView">
            <summary>Provides a debugger type proxy for the Transform.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.DebugView.m_batchedJoinBlockTarget">
            <summary>The batched join block target being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="batchedJoinBlockTarget">The batched join target being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTarget`1.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources">
            <summary>Provides a container for resources shared across all targets used by the same BatchedJoinBlock instance.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.#ctor(System.Int32,System.Boolean,System.Action,System.Action)">
            <summary>Initializes the shared resources.</summary>
            <param name="batchSize">The size of a batch to create.</param>
            <param name="unlinkAfterOneBatch">Whether the BatchedJoin survives for only a single batch.</param>
            <param name="batchSizeReachedAction">The action to invoke when a batch is completed.</param>
            <param name="allTargetsDecliningAction">The action to invoke when no more targets are accepting input.</param>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_incomingLock">
            <summary>
            A lock used to synchronize all incoming messages on all targets. It protects all of the rest 
            of the shared resource's state and will be held while invoking the delegates.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_batchSize">
            <summary>The size of the batches to generate.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_batchSizeReachedAction">
            <summary>The action to invoke when enough elements have been accumulated to make a batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_allTargetsDecliningPermanentlyAction">
            <summary>The action to invoke when all targets are declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_remainingItemsInBatch">
            <summary>The number of items remaining to form a batch.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_remainingAliveTargets">
            <summary>The number of targets still alive (i.e. not declining all further messages).</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.BatchedJoinBlockTargetSharedResources.m_decliningPermanently">
            <summary>Whether all targets should decline all further messages.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
            <summary>Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.</summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_completionTask">
            <summary>A TaskCompletionSource that represents the completion of this block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_targetRegistry">
            <summary>A registry used to store all linked targets and information about them.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_executionContext">
            <summary>The execution context to use when running the cloning function and when propagating.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_cloningFunction">
            <summary>The cloning function.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_dataflowBlockOptions">
            <summary>The options used to configure this block's execution.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_decliningPermanently">
            <summary>Whether all future messages should be declined.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.m_value">
            <summary>The singly-assigned value.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1"/>.</summary>
            <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1"/> with the specified <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>.</summary>
            <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.CompleteBlockAsync">
            <summary>Asynchronously completes the block on another task.</summary>
            <remarks>
            This must only be called once all of the completion conditions are met.
            If CompleteBlockAsync is called multiple times, it may end up launching 
            additional tasks that will end up being nops.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.CompleteBlock">
            <summary>Completes the block.</summary>
            <remarks>
            This must only be called once all of the completion conditions are met.
            This may be called multiple times, but is a nop on all times beyond the first.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.CloneItem(`0)">
            <summary>Clones the item.</summary>
            <param name="item">The item to clone.</param>
            <returns>The cloned item.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.OfferToTargets">
            <summary>Offers the WriteOnceBlock's message to all targets.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.IncomingLock">
            <summary>Gets the object used as the incoming lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.OutgoingLock">
            <summary>Gets the object used as the outgoing lock.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.HasValue">
            <summary>Gets whether the block is storing a value.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Value">
            <summary>Gets the value being stored by the block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView">
            <summary>Provides a debugger type proxy for WriteOnceBlock.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.m_writeOnceBlock">
            <summary>The WriteOnceBlock being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.WriteOnceBlock{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="writeOnceBlock">The WriteOnceBlock to view.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.IsCompleted">
            <summary>Gets whether the WriteOnceBlock has completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.HasValue">
            <summary>Gets whether the WriteOnceBlock has a value.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.Value">
            <summary>Gets the WriteOnceBlock's value if it has one, or default(T) if it doesn't.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
            <summary>
            Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, 
            waiting for one item to arrive for each type before theyâ€™re all released together as a tuple of one item per type.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`2.m_sharedResources">
            <summary>Resources shared by all targets for this join block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`2.m_source">
            <summary>The source half of this join.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`2.m_target1">
            <summary>The first target.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`2.m_target2">
            <summary>The second target.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2"/>.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Boolean)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2"/>.</summary>
            <param name="declineAfterOneJoin">true if join once and avoid subsequent joins; otherwise, false.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Boolean,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2"/>.</summary>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2"/>.</param>
            <param name="declineAfterOneJoin">true if join once and avoid subsequent joins; otherwise, false.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.DeclinePermanentlyOnEachTarget">
            <summary>
            Invokes DeclinePermanently on each target
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
            <summary>Gets a target that may be used to offer messages of the first type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
            <summary>Gets a target that may be used to offer messages of the second type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView">
            <summary>Provides a debugger type proxy for the JoinBlock.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.m_joinBlock">
            <summary>The JoinBlock being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.#ctor(System.Threading.Tasks.Dataflow.JoinBlock{`0,`1})">
            <summary>Initializes the debug view.</summary>
            <param name="joinBlock">The JoinBlock being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.TaskForInputProcessing">
            <summary>Gets the task being used for input processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.Target1">
            <summary>Gets the first target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.Target2">
            <summary>Gets the second target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.DebugView.NextMessageReservedFor">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
            <summary>
            Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, 
            waiting for one item to arrive for each type before theyâ€™re all released together as a tuple of one item per type.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
            <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.m_sharedResources">
            <summary>Resources shared by all targets for this join block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.m_source">
            <summary>The source half of this join.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.m_target1">
            <summary>The first target.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.m_target2">
            <summary>The second target.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.m_target3">
            <summary>The third target.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3"/>.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Boolean)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2"/>.</summary>
            <param name="declineAfterOneJoin">true if join once and avoid subsequent joins; otherwise, false.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Boolean,System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3"/>.</summary>
            <param name="declineAfterOneJoin">true if join once and avoid subsequent joins; otherwise, false.</param>
            <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean)">
            <summary>
        Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.
      </param><param name="unlinkAfterOne">
        true if the source should unlink from the target after successfully propagating a single message; 
        otherwise, false to remain connected even after a single message has been propagated.
      </param><returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
            <summary>
        Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="filter">
        The predicate a value must successfully pass in order for it to be received. 
        <paramref name="filter"/> may be null (Nothing in Visual Basic), in which case all items will pass.
      </param><param name="item">The item received from the source.</param><returns>true if an item could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for an element, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
            <summary>
        Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="items">The items received from the source.</param><returns>true if one or more items could be received; otherwise, false.</returns><remarks>
        This method does not block waiting for the source to provide an item.
        It will return after checking for elements, whether or not an element was available.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to accept and consume a  
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being consumed.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> consuming the message.
      </param><returns>
        <para>
          The consumed message.  This may be a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance than was previously reserved and
          passed as the <paramref name="message"/> to <see cref="M:ConsumeMessage"/>. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must 
          use the returned <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instance instead of the instance passed as <paramref name="message"/>.
        </para>
        <para>
          If the message requested is not available, the return value will be null (Nothing in Visual Basic).
        </para>
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ConsumeMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> 
        by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The message being reserved.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> reserving the message.
      </param><returns>true if the message was successfully reserved; otherwise, false.</returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> instance 
          may use <see cref="M:ReserveMessage"/>, and it must only be used
          to reserve <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          offered by this source to the target.
        </para>
        <para>
          If true is returned, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> must subsequently call either <see cref="M:ConsumeMessage"/> or <see cref="M:ReserveMessage"/> for this message.
          Failure to do so may result in the source being unable to propagate any further messages to this or other targets.
        </para>
        <para>
          <see cref="M:ReserveMessage"/> must not be called while the target is holding any internal locks.  Doing so will violate the lock hierarchy
          necessary to avoid deadlocks in a dataflow network.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessage{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
            <summary>
        Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to release a previously reserved 
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>.
      </summary><param name="message">The reserved message being released.</param><param name="target">
        The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> releasing the message it previously reserved.
      </param><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentNullException">
        The <paramref name="target"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.InvalidOperationException">
        The <paramref name="target"/> did not have the message reserved.
      </exception><remarks>
        <para>
          Only <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> instances linked to this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> 
          instance may use <see cref="M:ReleaseMessage"/>, and it must only be used
          to release <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> instances previously 
          and successfully reserved by the target.
        </para>
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.DeclinePermanentlyOnEachTarget">
            <summary>
            Invokes DeclinePermanently on each target
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
            <summary>
        Gets the number of output items available to be received from this block.
      </summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
            <summary>Gets a target that may be used to offer messages of the first type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
            <summary>Gets a target that may be used to offer messages of the second type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
            <summary>Gets a target that may be used to offer messages of the third type.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView">
            <summary>Provides a debugger type proxy for the Batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.m_joinBlock">
            <summary>The JoinBlock being viewed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.m_sourceDebuggingInformation">
            <summary>The source half of the block being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.#ctor(System.Threading.Tasks.Dataflow.JoinBlock{`0,`1,`2})">
            <summary>Initializes the debug view.</summary>
            <param name="joinBlock">The JoinBlock being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.OutputQueue">
            <summary>Gets the messages waiting to be received.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.TaskForInputProcessing">
            <summary>Gets the task being used for input processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.TaskForOutputProcessing">
            <summary>Gets the task being used for output processing.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.DataflowBlockOptions">
            <summary>Gets the DataflowBlockOptions used to configure this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.IsCompleted">
            <summary>Gets whether the block is completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.Target1">
            <summary>Gets the first target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.Target2">
            <summary>Gets the second target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.Target3">
            <summary>Gets the third target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.LinkedTargets">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.DebugView.NextMessageReservedFor">
            <summary>Gets the set of all targets linked from this block.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1">
            <summary>Provides the target used in a Join.</summary>
            <typeparam name="T">Specifies the type of data accepted by this target.</typeparam>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase">
            <summary>Provides a non-generic base type for all join targets.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.ReserveOneMessage">
            <summary>Reserves a single message.</summary>
            <returns>Whether a message could be reserved.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.ConsumeReservedMessage">
            <summary>Consumes any previously reserved message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.ReleaseReservedMessage">
            <summary>Releases any previously reserved message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.ClearReservation">
            <summary>Unconditionally clears a reserved message. This is only invoked in case of an exception.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.DeclinePermanently">
            <summary>Access point to the corrsponding API method.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.Complete">
            <summary>Completes the target.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.IsDecliningPermanently">
            <summary>Whether the target is postponing messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.HasAtLeastOneMessageAvailable">
            <summary>Whether the target has at least one message available.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase.HasAtLeastOnePostponedMessage">
            <summary>Whether the target has at least one message postponed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.m_sharedResources">
            <summary>The shared resources used by all targets associated with the same join instance.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.m_completionTask">
            <summary>A task representing the completion of the block.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.m_messages">
            <summary>Input messages for the next batch.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.m_nonGreedy">
            <summary>State used when in non-greedy mode.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.m_decliningPermanently">
            <summary>Whether this target is declining future messages.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.#ctor(System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources)">
            <summary>Initializes the target.</summary>
            <param name="sharedResources">The shared resources used by all targets associated with this join.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.GetOneMessage">
            <summary>Gets a message buffered by this target.</summary>
            <remarks>This must be called while holding the shared resource's incoming lock.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.ReserveOneMessage">
            <summary>Reserves one of the postponed messages.</summary>
            <returns>true if a message could be reserved; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.ConsumeReservedMessage">
            <summary>Consumes a reserved message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.ReleaseReservedMessage">
            <summary>Releases the reservation on a reserved message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.ClearReservation">
            <summary>Unconditionally clears a reserved message.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.Complete">
            <summary>Completes the target.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#Post(`0)">
            <summary>
        Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
      </summary><param name="item">The item being offered to the target.</param><returns>true if the item was accepted by the target block; otherwise, false.</returns><remarks>
        This method will return once the target block has decided to accept or decline the item,
        but unless otherwise dictated by special semantics of the target block, it does not wait
        for the item to actually be processed (for example, <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>
        will return from Post as soon as it's stored the posted item into its input queue).
        For target blocks that support postponing offered messages, or for blocks that may do more processing
        in their Post implementation, consider using
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockExtensions.PostAsync">PostAsync</see>, 
        which will return immediately and will enable the target to postpone the posted message and later consume it after PostAsync returns.
      </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
            <summary>
        Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>, giving the target the opportunity to consume or postpone the message.
      </summary><param name="message">
        The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> being offered.
      </param><param name="source">
        The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/> offering the message. This may be null (Nothing in Visual Basic).
      </param><param name="consumeToAccept">
        true if the target must call ConsumeMessage synchronously during the call to OfferMessage, prior to returning
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/>, in order to consume the message.
        false if the target wanting to accept the message should not call ConsumeMessage, and should isntead simply return DataflowMessageStatus.Accepted.
      </param><returns>
        The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"/> is returned, and the source should
        no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed"/> is returned
        as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.
        If the target would have otherwise postponed but source was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is instead returned. 
        If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, 
        <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable"/> is returned.
        If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined"/> is returned.  If the target
        chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently"/> is returned.
      </returns><exception cref="T:System.ArgumentNullException">
        The <paramref name="message"/> is null (Nothing in Visual Basic).
      </exception><exception cref="T:System.ArgumentException">
        <paramref name="consumeToAccept"/> may only be true if provided with a non-null <paramref name="source"/>.
      </exception>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.OfferMessageCore(System.Threading.Tasks.Dataflow.DataflowMessage{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean,System.Boolean)">
            <summary>
            Implements both Post and OfferMessage
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.DeclinePermanently">
            <summary>
        Signals to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> that it should not accept 
        any more messages nor consume any more postponed messages.
      </summary><remarks>
        After DeclinePermanently has been called on a dataflow target block, that block will complete
        (such that its CompletionTask will enter a final state) after it's processed all previously provided data.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.IsDecliningPermanently">
            <summary>Gets whether the target is declining messages.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.HasAtLeastOneMessageAvailable">
            <summary>Gets whether the target has at least one message available.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.HasAtLeastOnePostponedMessage">
            <summary>Gets whether the target has at least one postponed message.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.CompletionTask">
            <summary>
        Gets a <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the asynchronous operation and completion of the dataflow block.
      </summary><remarks>
        A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process
        any more messages. The returned <see cref="T:System.Threading.Tasks.Task">Task</see> will transition to a completed state when the
        associated block has completed. It will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state
        when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics, it will transition to
        the <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state when the dataflow block has completed processing prematurely due to an unhandled exception,
        and it will transition to the <see cref="T:System.Threading.Tasks.TaskStatus">Canceled</see> state when the dataflow  block has completed processing
        prematurely due to receiving a cancellation request.  If the task completes in the Faulted state, its Exception property will return
        an <see cref="T:System.AggregateException"/> containing the one or more exceptions that caused the block to fail.
      </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.CompletionTaskInternal">
            <summary>The completion task on Join targets is only hidden from the public. It still exists for internal purposes.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.InputCountForDebugger">
            <summary>Gets the number of messages waiting to be processed.  This must only be used from the debugger as it avoids taking necessary locks.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.GetNameForDebugger">
            <summary>Gets a string name for this type to output in a debugger display attribute.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.NonGreedyState">
            <summary>State used only when in non-greedy mode.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.NonGreedyState.PostponedMessages">
            <summary>Collection of postponed messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.NonGreedyState.PostponedMessagesTemp">
            <summary>A temporary list used in non-greedy mode when consuming postponed messages to store sources with postponed messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.NonGreedyState.ReservedMessage">
            <summary>The currently reserved message.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.DebugView">
            <summary>Provides a debugger type proxy for the Transform.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.DebugView.m_joinBlockTarget">
            <summary>The join block target being viewed.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.DebugView.#ctor(System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget{`0})">
            <summary>Initializes the debug view.</summary>
            <param name="joinBlockTarget">The join being viewed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.DebugView.InputQueue">
            <summary>Gets the messages waiting to be processed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTarget`1.DebugView.IsDecliningPermanently">
            <summary>Gets whether the block is declining further messages.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources">
            <summary>Provides a container for resources shared across all targets used by the same BatchedJoin instance.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.DEFAULT_DECLINEAFTERONEJOIN">
            <summary>The default value for "declineAfterOneJoin" when not specified.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.#ctor(System.Object,System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetBase[],System.Boolean,System.Action,System.Action{System.Exception},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>Initializes the shared resources.</summary>
            <param name="targets">
            The array of targets associated with the join. Also doubles as the sync object used to synchronize targets.
            </param>
            <param name="owningJoin">The JoinBlock that owns these shared resources. This is purely for debugging purposes.</param>
            <param name="declineAfterOneJoin">Whether the join is "once".</param>
            <param name="joinFilledAction">The delegate to invoke when enough messages have been consumed to fulfill the join.</param>
            <param name="exceptionAction">The delegate to invoke when a target encounters an error.</param>
            <param name="dataflowBlockOptions">The options for the join.</param>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_targets">
            <summary>Gets all of the targets associated with the join.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_declineAfterOneJoin">
            <summary>Gets whether the join is "once".</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_exceptionAction">
            <summary>Gets the delegate to invoke when a target encounters an error.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_dataflowBlockOptions">
            <summary>The options for the join.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_decliningPermanently">
            <summary>Gets whether all targets should decline all further messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_taskForInputProcessing">
            <summary>The task used to process messages.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_owningJoin">
            <summary>Gets all of the targets associated with the join.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_joinFilledAction">
            <summary>Gets the delegate to invoke when enough messages have been consumed to fulfill the join.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.m_cachedProcessMessagesLoopDelegate">
            <summary>A cached delegate used to invoke the process messages loop.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.RetrievePostponedItemsInNonGreedyMode">
            <summary>Retrieves postponed items if we have enough to make a batch.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.ProcessAsyncIfNecessary(System.Boolean)">
            <summary>Called when new messages are available to be processed.</summary>
            <param name="isReplacementReplica">Whether this call is the continuation of a previous message loop.</param>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.CompleteBlockIfPossible">
            <summary>Completes the join block if possible.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.ProcessMessagesLoop(System.Object)">
            <summary>Task body used to process messages.</summary>
            <param name="taskObjectState">Task object state that's ignored in this method but which helps debugging.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.IncomingLock">
            <summary>Gets the lock used to synchronize all incoming messages on all targets.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.AllTargetsHaveAtLeastOneMessage">
            <summary>Gets whether all of the targets have at least one message in their queues.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.Internal.JoinBlockTargetSharedResources.AllTargetsHaveAtLeastOneMessageQueuedOrPostponed">
            <summary>Gets whether all of the targets have at least one message in their queues or have at least one postponed message.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Dataflow.DataflowMessage`1">
            <summary>Provides a container for passing data between dataflow blocks.</summary>
            <typeparam name="T">Specifies the type of data contained in the message.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Dataflow.DataflowMessage`1.m_value">
            <summary>The message payload.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Dataflow.DataflowMessage`1.#ctor(`0)">
            <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessage`1"/> with the specified payload.</summary>
            <param name="value">The payload of the message.</param>
        </member>
        <member name="P:System.Threading.Tasks.Dataflow.DataflowMessage`1.Value">
            <summary>Gets the payload contained in the message.</summary>
        </member>
    </members>
</doc>
